# def hypoth_count(a, b):
#     return (a ** 2 + b ** 2) ** (1 / 2)
#
#
# hyp = hypoth_count(3, 4)
# print(hyp)

# list_square_and_cube_root = list(map(lambda x: (x ** 2) ** (1 / 3), range(30)))
# print(list_square_and_cube_root)

# list_1 = [1, 2, 3, 4]
# list_copy = list(map(lambda x: x, list_1))
# print(list_copy)

# @lopistopi

# list_ = [1,2,3]
# for elem in list_:
#     print(elem)


import math
# ---orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# ---max_1 = 0

# ---list_of_orbits = list(map(lambda ))
# ---def find_farthest_orbit(list_of_orbits):
# ---S = pi*a*b
# ---list_of_orbits
# ---print(*find_farthest_orbit(orbits))


# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# def find_orb(orbits):
#     return max(orbits, key = lambda x: x[0]*x[1] if x[0] != x[1] else -1)
# print(find_orb(orbits))

# Задача №39. Решение в группах
# Даны два массива чисел. Требуется вывести те элементы
# первого массива (в том порядке, в каком они идут в первом
# массиве), которых нет во втором массиве. Пользователь вводит
# число N - количество элементов в первом массиве, затем N
# чисел - элементы массива. Затем число M - количество
# элементов во втором массиве. Затем элементы второго массива
# Ввод: Вывод:
# 7 3 3 2 12
# 3 1 3 4 2 4 12
# 6
# 4 15 43 1 15 1 (каждое число вводится с новой строки)
#
#
# Задача №41.
# Дан массив, состоящий из целых чисел. Напишите
# программу, которая в данном массиве определит
# количество элементов, у которых два соседних и, при
# этом, оба соседних элемента меньше данного. Сначала
# вводится число N — количество элементов в массиве
# Далее записаны N чисел — элементы массива. Массив
# состоит из целых чисел.
# Ввод: Ввод:
# 5 5
# 1 2 3 4 5 1 5 1 5 1
# Вывод: Вывод:
# 0 2
#
#
# Задача №43. Решение в группах
# Дан список чисел. Посчитайте, сколько в нем пар
# элементов, равных друг другу. Считается, что любые
# два элемента, равные друг другу образуют одну пару,
# которую необходимо посчитать. Вводится список
# чисел. Все числа списка находятся на разных
# строках.
# Ввод: Вывод:
# 1 2 3 2 3 2
#
#
# Задача №45. Решение в группах
# Два различных натуральных числа n и m называются
# дружественными, если сумма делителей числа n
# (включая 1, но исключая само n) равна числу m и
# наоборот. Например, 220 и 284 – дружественные числа.
# По данному числу k выведите все пары дружественных
# чисел, каждое из которых не превосходит k. Программа
# получает на вход одно натуральное число k, не
# превосходящее 105
# . Программа должна вывести все
# пары дружественных чисел, каждое из которых не
# превосходит k. Пары необходимо выводить по одной в
# строке, разделяя пробелами. Каждая пара должна быть
# выведена только один раз (перестановка чисел новую
# пару не дает).
# Ввод: Вывод:
# 300 220 284